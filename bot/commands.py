import os
import logging
import re
from datetime import datetime

from telebot import types
from permissions import boss_only, admin_only
from config import bot, BOSS, PHOTOS, RULES_FILE, HELP_FILE, INVITE, MAGIC_CHAT_ID, BARTENDER, ADMIN
from polls import create_poll, unpin_poll
from utils import generate_report, clear_poll_results, clear_poll_id, load_yes_votes, set_friends, remove_friends, load_friends, save_friends
from buttons import send_reservation_buttons
from state import user_states
from events import create_event_poll, get_events_keyboard, get_confirmation_keyboard, delete_event, send_event_cancellation_notification, unpin_event_poll, get_events_list, get_events_keyboard_for_friends, add_event_friends, remove_event_friends, load_all_events, load_event_data, get_event_by_id, save_event_data
from random import choice


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)

def help_command(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help - –≤—ã–∑–æ–≤ —Ç–µ–∫—Å—Ç–∞ –ø–æ–º–æ—â–∏"""
    logger.info(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    try:
        with open(HELP_FILE, 'r', encoding='utf-8') as t:
            help_text = t.read()
        bot.send_message(message.chat.id, help_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø—Ä–∞–≤–∏–ª: {e}")


def invite_link(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /invite - –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–æ—Ç–æ–º —Å—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ —á–∞—Ç, –æ—Ç–∫—É–¥–∞ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞"""
    bot.send_message(message.chat.id, f'–°—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:\n {INVITE}')


def beer_rules(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /rules - –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–æ—Ç–æ–º —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∞–≤–∏–ª –≤ —á–∞—Ç, –æ—Ç–∫—É–¥–∞ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞"""
    media = []
    logger.info(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    logger.info(f"–ü—É—Ç–∏ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º: {PHOTOS}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    for path in PHOTOS:
        logger.info(f"–ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: {path}")
        if not os.path.exists(path):
            logger.error(f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {path}")
            continue
        try:
            with open(path, 'rb') as photos:
                media.append(types.InputMediaPhoto(photos.read()))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞ {path}: {e}")
            continue
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
    if media:
        bot.send_message(message.chat.id, "–©–∞ –≤—Å—ë —É–∑–Ω–∞–µ—à—å.")
        try:
            bot.send_media_group(message.chat.id, media)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
            bot.send_message(ADMIN, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∞–≤–∏–ª
    try:
        with open(RULES_FILE, 'r', encoding='utf-8') as t:
            rules_text = t.read()
        bot.send_message(message.chat.id, rules_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø—Ä–∞–≤–∏–ª: {e}")
        bot.send_message(ADMIN, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª")


def set_friends(message):
    """–§—É–Ω–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /setfriends - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π –Ω–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    yes_voters = [u['id'] for u in load_yes_votes()]
    
    if user_id not in yes_voters:
        bot.send_message(chat_id, "–¢—ã –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª '–î–∞', –ø–æ—ç—Ç–æ–º—É –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–∏–≤–µ—Å—Ç–∏ –¥—Ä—É–∑–µ–π üç∫")
        return

    user_states[(user_id, chat_id)] = {"state": "waiting_friends", "type": "set"}
    bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –¥—Ä—É–∑–µ–π –ø—Ä–∏–¥–µ—Ç —Å —Ç–æ–±–æ–π? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")


def minus_friends(message):
    """–§—É–Ω–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /minus friends - —É–¥–∞–ª–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π —Å —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    user_states[(user_id, chat_id)] = {"state": "waiting_friends", "type": "minus"}
    bot.send_message(chat_id, "–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥—Ä—É–∑–µ–π –º–µ–Ω—å—à–µ? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")


def greet_new_members(message):
    """–§—É–Ω–∫—Ü–∏—è-–¢—Ä–∏–≥–≥–µ—Ä –Ω–∞ –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞"""
    chat_id = message.chat.id
    for new_user in message.new_chat_members:
        user_id = new_user.id
        try: # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –µ–º—É –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É, –ø–æ–∫–∞ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –ø–∏–≤–æ.
            bot.restrict_chat_member(
                chat_id,
                user_id,
                permissions=types.ChatPermissions(can_send_messages=False)
            )
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("–î–∞", callback_data=f"beer_yes_{user_id}"),
                types.InlineKeyboardButton("–ù–µ—Ç", callback_data=f"beer_no_{user_id}")
            )
            bot.send_message(
                chat_id,
                f"–ü—Ä–∏–≤–µ—Ç, {new_user.first_name}! –¢—ã –ª—é–±–∏—à—å –ø–∏–≤–æ?",
                reply_markup=markup
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ –ø—Ä–∞–≤ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user_id}: {e}")


def info(message):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –Ω–∞ —Ç–µ–∫—Å—Ç"""
    print(f"INFO: chat_id={message.chat.id}, user_id={message.from_user.id}, text={message.text}")

    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å.
    if '–ø—Ä–∏–≤–µ—Ç' in message.text.lower():
        bot.send_message(message.chat.id, f'–ù—É –ø—Ä–∏–≤–µ—Ç, {message.from_user.first_name} {message.from_user.last_name or ""}..')

    # NO CEDH
    # CEDH CLUB
    elif (("cedh" in message.text.lower()
          or "cdh" in message.text.lower()
          or "—Åedh" in message.text.lower()
          or "—Å–µdh" in message.text.lower()
          or "c–µdh" in message.text.lower()
          or "—Å–∏–¥–∏—ç–π—á" in message.text.lower()
          or "—Å–∏–∏–¥–∏—ç–π—á" in message.text.lower()
          or "—Ü–µ–¥—Ö" in message.text.lower()
          or "—Üe–¥—Ö" in message.text.lower()
          or "—Ü–µ–¥x" in message.text.lower()
          or "—Üe–¥x" in message.text.lower()
          or "—Ü–¥—Ö" in message.text.lower()
          or "–∫–æ–º–ø–æ—Ç" in message.text.lower()
          or "–∫–µ–¥—Ö" in message.text.lower()
          or "–∫–¥—Ö" in message.text.lower()
          or "–∫–æ–º–ø–µ—Ç–∏—Ç–∏–≤" in message.text.lower())):
        phrases = ["–ù–∏ —Å–ª–æ–≤–∞ –ø—Ä–æ CEDH –≤ —ç—Ç–æ–º —á–∞—Ç–µ!", "–í–Ω–∏–º–∞–Ω–∏–µ! –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É–≥—Ä–æ–∑–∞ CEDH!\n–ü–∞—Ä–Ω–∏, –≥–æ—Ç–æ–≤—å—Ç–µ —Å–≤–æ–∏ COUNETERSPELLS..", "–û—Ç—Å—Ç–∞–≤–∏—Ç—å cEDH!", "CringeDH..", "–ê–≥–∞–∞–∞–∞, –ø–æ–ø–∞–ª—Å—è! –¶–µ–¥—Ö—à–Ω–∏–∫.."]
        bot.reply_to(message, choice(phrases))
        
    # Format memes:
    elif (" —Å—Ç–∞–Ω–¥–∞—Ä—Ç " in message.text.lower()
          or "standard" in message.text.lower()):
        bot.reply_to(message, f"–°—Ç–∞–Ω–¥–∞—Ä—Ç –º—ë—Ä—Ç–≤, —á—É–≤–∞–∫–∏. ü§°")
    elif ("–ø–∏–æ–Ω–µ—Ä" in message.text.lower()
          or "pioner" in message.text.lower()):
        bot.reply_to(message, "–£—É—É—É, –ø–∞—Ü–∞–Ω—ã, –¥–∞ —É –Ω–∞—Å —Ç—É—Ç –ø–∏–æ–Ω–µ—Ä—â–∏–∫..\n–î—ã—Ä—è–≤–∏–º –µ–≥–æ!")
    elif ("–ø—Ä–µ–º–æ–¥–µ—Ä–Ω" in message.text.lower()
          or "premodern" in message.text.lower()):
        bot.reply_to(message, "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–¥—É–º–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, —á—Ç–æ–±—ã –ø–æ–∏–≥—Ä–∞—Ç—å —Å–æ —Å–≤–æ–∏–º –ø–∞—Ä–Ω–µ–º!")
    elif ("–º–æ–¥–µ—Ä–Ω" in message.text.lower()
          or "modern" in message.text.lower()):
        bot.reply_to(message, "–ú–æ–¥–µ—Ä–Ω –¥–ª—è –≥–µ–µ–≤!")
    elif ("–ª–µ–≥–∞—Å–∏" in message.text.lower()
          or "–ª–µ–≥–æ—Å–∏" in message.text.lower()
          or "legacy" in message.text.lower()):
        bot.reply_to(message, "–•—É–µ–≥–∞—Å–∏")
    elif ("–ø–∞—É–ø–µ—Ä" in message.text.lower()
          or "–ø—É–ø–µ—Ä" in message.text.lower()
          or "pauper" in message.text.lower()):
        bot.reply_to(message, "–ø–∞—É–ø–µ—Ä –¥–ª—è –±–æ–º–∂–µ–π –±—Ç–≤ ü§°")
    elif ("–≤–∏–Ω—Ç–∞–∂" in message.text.lower()
          or "vintage" in message.text.lower()):
        bot.reply_to(message, "–ö–∞–∫–æ–π —Ç–µ–±–µ –µ—â—ë –≤–∏–Ω—Ç–∞–∂? –ü–æ –π–æ–≥—É—Ä—Ç—É –∏ —Å–ø–∞—Ç—å.")
    elif "elder dragon highlander" in message.text.lower():
        bot.reply_to(message, f"–≠–≤–æ–Ω–∞ –∫–∞–∫ —Ç—ã –∑–∞–≤–µ—Ä–Ω—É–ª")
    elif ("edh" in message.text.lower()
          or "–µ–¥—Ö" in message.text.lower()):
        bot.reply_to(message, "–ë–ª–∏–Ω–±, –ï–î–•.... ü§§")
    elif ("—ç—Ä–º–∏—Ç–∞–∂" in message.text.lower()
          or "heritage" in message.text.lower()
          or "—Ü–µ–Ω—Ç—É—Ä–∏–æ–Ω" in message.text.lower()
          or "centurion" in message.text.lower()
          or "–ª–µ–≥–∞—Å–∏ –∫—É–±" in message.text.lower()):
        bot.reply_to(message, "–û–ø—è—Ç—å –≤—ã–¥—É–º–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç..\n–ü–∞—Ä–Ω–∏, –∑–≤–æ–Ω–∏—Ç–µ –≤ –¥—É—Ä–∫—É.")
    elif (" –∞—Ä–µ–Ω–∞ " in message.text.lower()
          or "–∞—Ä–µ–Ω–µ" in message.text.lower()
          or "–∞—Ä–µ–Ω–∫–∞" in message.text.lower()
          or "–∞—Ä–µ–Ω—É" in message.text.lower()
          or "–∞—Ä–µ–Ω–∫–µ" in message.text.lower()
          or "–∞—Ä–µ–Ω–∫—É" in message.text.lower()):
        bot.reply_to(message, "–ü–ê–†–ù–ò, –ê–ù–ï–ö–î–û–¢!\n–ü—Ä–∏—Ö–æ–¥–∏—Ç –∏–≥—Ä–æ–∫ –≤ –∞—Ä–µ–Ω—É –¥–æ–º–æ–π –∏ –≥–æ–≤–æ—Ä–∏—Ç —Å–≤–æ–µ–º—É –ø–∞—Ä–Ω—é '–°—Ö–ª–µ—Å—Ç–Ω–µ–º—Å—è –Ω–∞ –º–µ—á–∞—Ö, –ì–ª–∞–¥–∏–∞—Ç–æ—Ä?' ü§°")
    elif ("rudc" in message.text.lower()
          or "—Ä—É–¥–∫" in message.text.lower()
          or "—Ä—É–¥—Ü" in message.text.lower()
          or "duel commander" in message.text.lower()
          or "—Ä—É–¥—Ö" in message.text.lower()):
        bot.reply_to(message, "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–¥—É–º–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, —á—Ç–æ–±—ã –ø–æ–∏–≥—Ä–∞—Ç—å —Å–æ —Å–≤–æ–∏–º –ø–∞—Ä–Ω–µ–º!")
    elif ("–¥—É—ç–ª—å–Ω–∏–∫" in message.text.lower()
          or "–¥—É—ç–ª—å–Ω—ã–π" in message.text.lower()):
        bot.reply_to(message, f"–î—É—ç–ª—å–Ω–∞—è –º–∞–≥–∏—è - —ç—Ç–æ –≤—Ç–∏—Ö–∞—Ä—è —Ç–∞–ø–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ ü§°")
    
    # Glory to Beer
    elif (" –ø–∏–≤–æ " in message.text.lower()
          or " –ø–∏–≤–∞ " in message.text.lower()):
        bot.reply_to(message, "–ü–∏–≤–æ –≤ —Å—Ç–µ–∫–µ! –û—Ç–≤–µ—Ç—ã?")
        
    # Only LoveCraft
    elif ("–∏–≥—Ä–æ–º–µ–Ω—Ç–∞–ª" in message.text.lower()
          or "—Ö–æ–±–±–∏–≥–µ–π–º—Å" in message.text.lower()
          or "–µ–¥–∏–Ω–æ—Ä–æ–≥" in message.text.lower()
          or " —Ö–≥ " in message.text.lower()
          or " —Ä–æ–≥–µ " in message.text.lower()
          or " —Ä–æ–≥–∞ " in message.text.lower()):
        bot.reply_to(message, "–í–ù–ò–ú–ê–ù–ò–ï!\n–í—Ä–∞–∂–µ—Å–∫–∞—è —Ä–µ–∫–ª–∞–º–∞ –≥–µ–π–∫–ª—É–±–∞!\n–í—Å–µ–º –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —Å–≤–æ—é –≥–µ—Ç–µ—Ä–æ—Å–µ–∫—Å—É–∞–ª—å–Ω–æ—Å—Ç—å!")

    # –°—Ç–∞—Å Special
    elif "—Å—Ç–∞—Å" in message.text.lower():
        bot.reply_to(message, f"–ë–ª–∏–Ω–±, –°—Ç–∞—Å.... ü§§ ")
    
    # Random memes
    elif " –±–æ—Ç " in message.text.lower():
        bot.reply_to(message, f"–ß—ë —Ç–µ–±–µ –Ω–∞–¥–æ?")
    elif "–∫–æ–Ω—Ç—Ä–∞" in message.text.lower():
        bot.reply_to(message, f"–ö–æ–Ω—Ç—Ä–∞? –í —Å—Ç–µ–∫ –∫–æ–Ω—Å–∏–¥–Ω—É–ª.")
    elif ("—Ä–∏—Å—Ç–∏–∫" in message.text.lower()
          or "—Ä–µ–º–æ—Ä–∞" in message.text.lower()):
        bot.reply_to(message, "–î–æ–ø–ª–∞—á–∏–≤–∞—Ç—å –±—É–¥–µ—à—å?")
    elif ("—é—Ä–∏–∫–æ" in message.text.lower()
          or "yuriko" in message.text.lower()):
        bot.reply_to(message, "–Æ—Ä–∏–∫–æ? –¢—Ä–∏–≥–≥–µ—Ä!\n–í –µ–±–∞–ª–æ –≤—Å–µ–º –Ω–∞ 15!")
    elif "–ª–µ–≥–æ—Å–µ–∫–∏" in message.text.lower():
        bot.reply_to(message, f"–õ–µ–≥–æ—Å–µ–∫–∏ - –ì–æ–º–æ—Å–µ–∫–∏")
    elif "–ª–µ–≥–æ—Å–µ–∫" in message.text.lower():
        bot.reply_to(message, f"–õ–µ–≥–æ—Å–µ–∫ - –ì–æ–º–æ—Å–µ–∫")
        
    # Friends
    key = (message.from_user.id, message.chat.id)
    if key in user_states:
        state = user_states[key]
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥—Ä—É–∑–µ–π
        if state["state"] == "waiting_friends":
            try:
                count = int(message.text.strip())
            except ValueError:
                bot.send_message(message.chat.id, "–£–∫–∞–∂–∏ –ß–ò–°–õ–û, –î—Ä—É–∂–∏—â–µ!")
                return

            # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π
            if state["type"] == "set":
                if count <= 0:
                    bot.send_message(message.chat.id, "–£ —Ç–µ–±—è —á—ë –¥—Ä—É–∑—å—è –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞—Ö –∏–∑–º–µ—Ä—è—é—Ç—Å—è, —É–º–Ω–∏–∫?")
                    return
                set_friends(message.from_user, count)
                bot.send_message(message.chat.id, f"–û—Ç–ª–∏—á–Ω–æ! –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª —Ç–µ–±–µ {count} –∫–æ—Ä–µ—à–µ–π.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–¥–æ–Ω–∏—Å—Ç–æ–≤-–ª—É–¥–æ–º–∞–Ω–æ–≤ –Ω–µ—É–º–æ–ª–∏–º–æ —Ä–∞—Å—Ç–µ—Ç!\n–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!")

            # –£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π
            elif state["type"] == "minus":
                from utils import load_friends, save_friends

                friends = load_friends()
                for f in friends:
                    if f['id'] == message.from_user.id:
                        f['count'] -= count
                        if f['count'] <= 0:
                            remove_friends(message.from_user)
                            bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –±–æ–ª—å—à–µ –Ω–µ—Ç –¥—Ä—É–∑–µ–π.")
                        else:
                            save_friends(friends)
                            bot.send_message(message.chat.id, f"–û–∫–µ–π, —Ç–µ–ø–µ—Ä—å —Å —Ç–æ–±–æ–π –ø—Ä–∏–¥–µ—Ç {f['count']} –¥—Ä—É–≥(-–∞)")
                        break
                else:
                    bot.send_message(message.chat.id, "–¢—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª—è–ª –¥—Ä—É–∑–µ–π.")
            
            user_states.pop(key, None)
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
        elif state["state"] == "waiting_event_title":
            title = message.text.strip()
            if len(title) < 3:
                bot.send_message(message.chat.id, "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
                
            user_states[key] = {"state": "waiting_event_date", "title": title}
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
            return
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã –Ω–∞ –ù–ï–†–ï–ì–£–õ–Ø–†–ù–û–ï —Å–æ–±—ã—Ç–∏–µ
        elif state["state"] == "waiting_event_date":
            date_text = message.text.strip()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            if not re.match(r'^\d{2}\.\d{2}\.\d{4}$', date_text):
                bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì:")
                return
                
            try:
                event_date = datetime.strptime(date_text, '%d.%m.%Y')
                today = datetime.now()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º, –∞ —Ç–æ –≤—Å—è–∫–æ–µ –±—ã–≤–∞–µ—Ç..
                if event_date.date() <= today.date():
                    bot.send_message(message.chat.id, "–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
                    return
                    
            except ValueError:
                bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
                return
                
            title = state.get("title", "")
            user_states[key] = {"state": "waiting_event_time", "title": title, "date": date_text}
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
            return
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ù–ï–†–ï–ì–£–õ–Ø–†–ù–û–ï —Å–æ–±—ã—Ç–∏–µ
        elif state["state"] == "waiting_event_time":
            time_text = message.text.strip()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
            if not re.match(r'^\d{2}:\d{2}$', time_text):
                bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú:")
                return
                
            try:
                event_time = datetime.strptime(time_text, '%H:%M')
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
                if event_time.hour < 8 or event_time.hour > 23:
                    bot.send_message(message.chat.id, "–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–∂–¥—É 08:00 –∏ 23:00. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
                    return
                    
            except ValueError:
                bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
                return
                
            title = state.get("title", "")
            date = state.get("date", "")
            
            # –°–æ–∑–¥–∞–µ–º –ù–ï–†–ï–ì–£–õ–Ø–†–ù–û–ï —Å–æ–±—ã—Ç–∏–µ
            event_id, poll_message_id = create_event_poll(title, date, time_text)
            
            if event_id and poll_message_id:
                bot.send_message(message.chat.id, f"‚úÖ –°–æ–±—ã—Ç–∏–µ '{title}' —Å–æ–∑–¥–∞–Ω–æ –Ω–∞ {date} –≤ {time_text}!")
            else:
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            
            user_states.pop(key, None)
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥—Ä—É–∑–µ–π —Å–æ–±—ã—Ç–∏–π
        elif state["state"] == "waiting_event_friends":
            try:
                count = int(message.text.strip())
            except ValueError:
                bot.send_message(message.chat.id, "–£–∫–∞–∂–∏ –ß–ò–°–õ–û, –î—Ä—É–∂–∏—â–µ!")
                return

            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∏–≤–µ–Ω—Ç
            event_id = state.get("event_id")
            if not event_id:
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                user_states.pop(key, None)
                return

            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π
            if state["type"] == "set":
                if count <= 0:
                    bot.send_message(message.chat.id, "–£ —Ç–µ–±—è —á—ë –¥—Ä—É–∑—å—è –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞—Ö –∏–∑–º–µ—Ä—è—é—Ç—Å—è, —É–º–Ω–∏–∫?")
                    return
                    
                success, message_text = add_event_friends(event_id, message.from_user, count)
                bot.send_message(message.chat.id, message_text)

            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π
            elif state["type"] == "minus":
                success, message_text = remove_event_friends(event_id, message.from_user, count)
                bot.send_message(message.chat.id, message_text)
            
            user_states.pop(key, None)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã shout
        elif state["state"] == "waiting_shout_text":
            shout_text = message.text.strip()
            
            if len(shout_text) < 5:
                bot.send_message(message.chat.id, "–¢–µ–∫—Å—Ç –∞–Ω–æ–Ω—Å–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–æ–Ω—Å –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
                bot.send_message(MAGIC_CHAT_ID, shout_text)
                bot.send_message(ADMIN, "‚úÖ –ê–Ω–æ–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç!")
                logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.first_name} –æ—Ç–ø—Ä–∞–≤–∏–ª –∞–Ω–æ–Ω—Å: {shout_text[:50]}...")
            except Exception as e:
                bot.send_message(ADMIN, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–æ–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–æ–Ω—Å–∞: {e}")
            
            user_states.pop(key, None)
            return


# ============================== –ö–û–ú–ê–ù–î–´ –†–£–ß–ù–û–ì–û –ó–ê–ü–£–°–ö–ê ==============================


@boss_only
def manual_poll(message):
    """–§—É–Ω–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /pollnow - –†–£–ß–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –≤—Ä—É—á–Ω—É—é"""
    create_poll(bot)
    bot.send_message(BOSS, "–û–ø—Ä–æ—Å –∑–∞–ø—É—â–µ–Ω –≤—Ä—É—á–Ω—É—é.")


@boss_only
def manual_poll_results(message):
    """–§—É–Ω–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /pollres - –†–£–ß–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞ –ë–æ—Å—Å—Å—É –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    report, tables = generate_report()
    unpin_poll(bot)

    if report is None or tables == 0:
        # –ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª "–î–∞"
        bot.send_message(BOSS, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        try:
            bot.send_message(MAGIC_CHAT_ID, "–†–µ–∫–∏ –ø–∏–≤–∞ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º–∏..")
            bot.send_message(BARTENDER, "–ü—Ä–∏–≤–µ—Ç, —Å–µ–≥–æ–¥–Ω—è –±–µ–∑ –±—Ä–æ–Ω–∏. –£ –º–∞–≥–æ–≤ –Ω–µ–¥–µ–ª—è —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ '–Ω–µ –ø—Ä–∏–¥–µ–º' –±–∞—Ä–º–µ–Ω—É: {e}")
        clear_poll_results()
        clear_poll_id()
        return

    try:
        bot.send_message(BOSS, "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –≤—Ä—É—á–Ω—É—é.")
        bot.send_message(BOSS, report)
        bot.send_message(MAGIC_CHAT_ID, report)
        send_reservation_buttons(BOSS)
        bot.send_message(
            MAGIC_CHAT_ID,
            "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n–í—Å–µ–º –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏–º –ª–µ—Ç–∏—Ç –ø–ª–æ—Ç–Ω–∞—è —Ä–µ—Å–ø–µ–∫—Ç—É–ª—è.\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ë–æ—Å—Å—É."
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ë–æ—Å—Å—É: {e}")
        try:
            bot.send_message(BOSS, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ë–æ—Å—Å.")
        except:
            pass

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /gameon
@boss_only
def manual_gameon(message):
    """–§—É–Ω–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /gameon - –†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∂–µ–ª–∞–Ω–∏–π —Ö–æ—Ä–æ—à–µ–π –∏–≥—Ä—ã –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞"""
    clear_poll_results()
    clear_poll_id()
    bot.send_message(MAGIC_CHAT_ID, "–•–æ—Ä–æ—à–µ–π –∏–≥—Ä—ã, –≥–æ—Å–ø–æ–¥–∞ –º–∞–≥–∏!\n–ü—É—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç —Ö–æ—Ç—å –∫—Ç–æ-–Ω–∏–±—É–¥—å, –∞ –Ω–∞–ø—å–µ—Ç—Å—è –ø–∏–≤–∞ —Å–∏–ª—å–Ω–µ–π—à–∏–π!")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /shout
@admin_only
def shout_command(message):
    """–§—É–Ω–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /shout - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
    if message.chat.type != 'private':
        bot.send_message(chat_id, "–ö–æ–º–∞–Ω–¥–∞ /shout –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return
    
    user_states[(user_id, chat_id)] = {"state": "waiting_shout_text"}
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∞–Ω–æ–Ω—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç:")


def skolkobudetnaroda(message):
    """–§—É–Ω–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /skolkobudetnaroda - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º —Ä–∞–Ω–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —á–∞—Ç"""
    try:
        report, tables = generate_report()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏
        if report is None or tables == 0:
            bot.send_message(message.chat.id, "–†–∞–Ω–æ–≤–∞—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è, –¥—Ä—É–∂–∏—â–µ..")
            return
        
        try:
            bot.send_message(message.chat.id, report)    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ /skolkobudetnaroda: {e}")
            bot.send_message(message.chat.id, "–†–∞–Ω–æ–≤–∞—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è, –¥—Ä—É–∂–∏—â–µ..")
            bot.send_message(ADMIN, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –Ω–∞—Ä–æ–¥—É.")
    except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ /skolkobudetnaroda: {e}")
            bot.send_message(message.chat.id, "–†–∞–Ω–æ–≤–∞—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è, –¥—Ä—É–∂–∏—â–µ..")
            bot.send_message(ADMIN, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –Ω–∞—Ä–æ–¥—É.")


# ============================== –ö–û–ú–ê–ù–î–´ –ù–ï–†–ï–ì–£–õ–Ø–†–ù–´–• –ò–í–ï–ù–¢–û–í (BETA) ==============================


def events_command(message):
    """–§—É–Ω–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /events - –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ù–ï–†–ï–ì–£–õ–Ø–†–ù–´–• –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    events_list = get_events_list()
    bot.send_message(message.chat.id, events_list)


@boss_only
def add_event_command(message):
    """–§—É–Ω–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /addevent - –°–æ–∑–¥–∞–Ω–∏–µ –ù–ï–†–ï–ì–£–õ–Ø–†–ù–û–ì–û –∏–≤–µ–Ω—Ç–∞"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    user_states[(user_id, chat_id)] = {"state": "waiting_event_title"}
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")


@boss_only
def delete_event_command(message):
    """–§—É–Ω–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /deleteevent - –£–¥–∞–ª–µ–Ω–∏–µ –ù–ï–†–ï–ì–£–õ–Ø–†–ù–û–ì–û –∏–≤–µ–Ω—Ç–∞"""
    keyboard = get_events_keyboard()
    
    if not keyboard:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=keyboard
    )


def set_event_friends(message):
    """–§—É–Ω–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /seteventfriends - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π –Ω–∞ –ù–ï–†–ï–ì–£–õ–Ø–†–ù–´–ô –∏–≤–µ–Ω—Ç"""
    keyboard = get_events_keyboard_for_friends()
    
    if not keyboard:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        return
    
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    user_states[(user_id, chat_id)] = {"state": "waiting_event_friends", "type": "set"}
    
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–∑–µ–π:",
        reply_markup=keyboard
    )


def minus_event_friends(message):
    """–§—É–Ω–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /minuseventfriends - –£–¥–∞–ª–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π —Å –ù–ï–†–ï–ì–£–õ–Ø–†–ù–û–ì–û –∏–≤–µ–Ω—Ç–∞"""
    keyboard = get_events_keyboard_for_friends()
    
    if not keyboard:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        return
    
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    user_states[(user_id, chat_id)] = {"state": "waiting_event_friends", "type": "minus"}
    
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—Ä—É–∑–µ–π:",
        reply_markup=keyboard
    )


@boss_only
def send_event_results_command(message):
    """–§—É–Ω–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /sendevent - –†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –∏–≤–µ–Ω—Ç—É –±–∞—Ä–º–µ–Ω—É"""
    events = load_all_events()
    if not events:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        return
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–æ–±—ã—Ç–∏—è
    markup = types.InlineKeyboardMarkup()
    for event in events:
        btn = types.InlineKeyboardButton(f"{event['title']} - {event['date']} {event['time']}", callback_data=f"send_event_result_{event['id']}")
        markup.add(btn)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–∞—Ä–º–µ–Ω—É:", reply_markup=markup)


# TODO: –ü–ï–†–ï–ü–ò–°–ê–¢–¨ –≠–¢–£ –¢–ï–ú–£:
def handle_send_event_result_callback(call):
    """–§—É–Ω–∫—Ü–∏—è-Callback –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    data = call.data
    if not data.startswith("send_event_result_"):
        return
    event_id = data.replace("send_event_result_", "")
    event = get_event_by_id(event_id)
    if not event:
        bot.answer_callback_query(call.id, "–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    event_data = load_event_data(event_id)
    participants_count = len(event_data['participants'])
    friends_count = sum(f['count'] for f in event_data.get('friends', []))
    total_count = participants_count + friends_count
    tables = (total_count + 3) // 4
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ä–º–µ–Ω—É
    message = f"–ü—Ä–∏–≤–µ—Ç! –°–µ–≥–æ–¥–Ω—è –º–∞–≥–∏ —Ä–µ—à–∏–ª–∏ –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ —Å–æ–±—Ä–∞—Ç—å—Å—è!\n–í–æ—Ç —Å—Ç–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –ø—Ä–∏–¥—ë—Ç: {total_count} –Ω—É–∂–Ω–æ {tables} —Å—Ç–æ–ª–æ–≤."
    bot.send_message(BARTENDER, message)
    # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º –æ–ø—Ä–æ—Å
    unpin_event_poll(event_id)
    # –û—á–∏—â–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –¥—Ä—É–∑–µ–π
    save_event_data(event_id, {"participants": [], "friends": []})
    bot.answer_callback_query(call.id, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –±–∞—Ä–º–µ–Ω—É –∏ –æ—á–∏—â–µ–Ω—ã!", show_alert=True)
    bot.send_message(call.message.chat.id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ '{event['title']}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –±–∞—Ä–º–µ–Ω—É –∏ –æ—á–∏—â–µ–Ω—ã.")










