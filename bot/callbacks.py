from telebot import types
from config import MAGIC_CHAT_ID, BOSS, BARTENDER, bot, BOSSES
from commands import beer_rules
from buttons import send_reservation_buttons
from utils import generate_report, clear_poll_results, clear_poll_id
from events import get_confirmation_keyboard, delete_event, send_event_cancellation_notification, unpin_event_poll, handle_event_poll_answer
from state import user_states


def callback_message(callback):
    data = callback.data
    chat_id = callback.message.chat.id
    message_id = callback.message.message_id
    user_id = callback.from_user.id

    # --- –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ beer_yes / beer_no ---
    if data.startswith("beer_"):
        parts = data.split("_")
        if len(parts) != 3:
            bot.answer_callback_query(callback.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!", show_alert=True)
            return

        action, _, user_id_str = parts
        try:
            user_id_from_button = int(user_id_str)
        except ValueError:
            bot.answer_callback_query(callback.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id!", show_alert=True)
            return

        if user_id != user_id_from_button:
            bot.answer_callback_query(callback.id, "–û—Å—Ç–∞–ª—å–Ω—ã—Ö –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª–∏!", show_alert=True)
            return

        bot.answer_callback_query(callback.id)

        if action == "beer":
            if parts[1] == "yes":
                bot.restrict_chat_member(
                    chat_id,
                    user_id,
                    permissions=types.ChatPermissions(
                        can_send_messages=True,
                        can_send_media_messages=True,
                        can_send_other_messages=True,
                        can_add_web_page_previews=True
                    )
                )
                bot.edit_message_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –¥–æ–º–æ–π, –î—Ä—É–≥! üéâ", chat_id, message_id)

                full_name = f"{callback.from_user.first_name or ''} {callback.from_user.last_name or ''}".strip()
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton('üìú –ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã', callback_data='RULES'))

                welcome_text = (
                    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!\n\n"
                    f"–û–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ —â–∞–º!"
                )
                bot.send_message(chat_id, welcome_text, reply_markup=markup)

            elif parts[1] == "no":
                bot.restrict_chat_member(
                    chat_id,
                    user_id,
                    permissions=types.ChatPermissions(
                        can_send_messages=True,
                        can_send_media_messages=True,
                        can_send_other_messages=True,
                        can_add_web_page_previews=True
                    )
                )
                bot.edit_message_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∫–æ–Ω–µ—á–Ω–æ, –Ω–æ —Å—Ä–∞–∑—É —Å–∫–∞–∂—É, —É –Ω–∞—Å —Ç–∞–∫–∏—Ö –Ω–µ –ª—é–±—è—Ç..", chat_id, message_id)

                full_name = f"{callback.from_user.first_name or ''} {callback.from_user.last_name or ''}".strip()
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton('üìú –ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã', callback_data='RULES'))

                welcome_text = (
                    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!\n\n"
                    f"–û–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ —â–∞–º!"
                )
                bot.send_message(chat_id, welcome_text, reply_markup=markup)

        return

    # --- –ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã ---
    elif data == 'RULES':
        beer_rules(callback.message)

    # --- –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: –≤—ã–±–æ—Ä —Å–æ–±—ã—Ç–∏—è ---
    elif data.startswith("delete_event_"):
        if user_id not in BOSSES:  # –¢–æ–ª—å–∫–æ –±–æ—Å—Å—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è
            bot.answer_callback_query(callback.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π!", show_alert=True)
            return
            
        event_id = data.replace("delete_event_", "")
        keyboard = get_confirmation_keyboard(event_id)
        
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–≤–µ–Ω—Ç?",
            reply_markup=keyboard
        )

    # --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è ---
    elif data.startswith("confirm_delete_"):
        if user_id not in BOSSES:  # –¢–æ–ª—å–∫–æ –±–æ—Å—Å—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è
            bot.answer_callback_query(callback.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π!", show_alert=True)
            return
            
        event_id = data.replace("confirm_delete_", "")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
        send_event_cancellation_notification(event_id)
        
        # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º –æ–ø—Ä–æ—Å
        unpin_event_poll(event_id)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        if delete_event(event_id):
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="‚úÖ –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ!"
            )
        else:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è!"
            )

    # --- –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è ---
    elif data == "cancel_delete":
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
        )

    # --- –í—ã–±–æ—Ä —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –¥—Ä—É–∑–µ–π ---
    elif data.startswith("event_friends_"):
        event_id = data.replace("event_friends_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        key = (user_id, chat_id)
        if key not in user_states:
            bot.answer_callback_query(callback.id, "–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
            
        state = user_states[key]
        if state["state"] != "waiting_event_friends":
            bot.answer_callback_query(callback.id, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        state["event_id"] = event_id
        user_states[key] = state
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
        from events import get_event_by_id
        event = get_event_by_id(event_id)
        
        if not event:
            bot.answer_callback_query(callback.id, "–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            user_states.pop(key, None)
            return
        
        action_type = "–¥–æ–±–∞–≤–ª–µ–Ω–∏—è" if state["type"] == "set" else "—É–¥–∞–ª–µ–Ω–∏—è"
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=f"–í—ã–±—Ä–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event['title']} - {event['date']} {event['time']}\n\n–°–∫–æ–ª—å–∫–æ –¥—Ä—É–∑–µ–π {action_type}? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ."
        )

    # --- –ë–æ—Å—Å –Ω–∞–∂–∞–ª "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª" ---
    elif data == 'book_table':
        report, tables = generate_report()
        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text="–°—Ç–æ–ª –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω! ü™ë")
        try:
            if tables == 0:
                bot.send_message(MAGIC_CHAT_ID, "–†–µ–∫–∏ –ø–∏–≤–∞ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º–∏..")
                bot.send_message(BARTENDER, "–ü—Ä–∏–≤–µ—Ç, —Å–µ–≥–æ–¥–Ω—è –±–µ–∑ –±—Ä–æ–Ω–∏. –£ –º–∞–≥–æ–≤ ‚Äî —Ç—Ä–µ–∑–≤–∞—è —Å—Ä–µ–¥–∞.")
            else:
                bot.send_message(MAGIC_CHAT_ID, "–ë–æ—Å—Å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –∫–∞–±–∞–∫!")
                bot.send_message(MAGIC_CHAT_ID, report)
                bot.send_message(BOSS, "–û—Ç–ª–∏—á–Ω–æ, —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å—Ç–æ–ª—ã.")
                bot.send_message(BARTENDER, f"–ü—Ä–∏–≤–µ—Ç, –º–∞–≥–∏ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏–¥—É—Ç –∫ 19:00, —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º {tables} —Å—Ç–æ–ª–∞(-–æ–≤).")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±—Ä–æ–Ω–∏: {e}")

    # --- –ë–æ—Å—Å –Ω–∞–∂–∞–ª "–ú—ã –Ω–µ –ø—Ä–∏–¥–µ–º" ---
    elif data == 'not_come':
        send_reservation_buttons(chat_id=chat_id, message_id=message_id, confirm_decline=True)

    # --- –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∏–∑ "–ú—ã –Ω–µ –ø—Ä–∏–¥–µ–º" ---
    elif data == 'back_to_menu':
        send_reservation_buttons(chat_id=chat_id, message_id=message_id)

    # --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–∞–∑–∞ ---
    elif data == 'sure_not_come':
        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text="–û—á–µ–Ω—å –∂–∞–ª—å. –ß—Ç–æ–∂, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.")
        try:
            bot.send_message(MAGIC_CHAT_ID, "–°–µ–≥–æ–¥–Ω—è –º–∞–≥–∏–∏ –Ω–µ –±—É–¥–µ—Ç. –ë–æ—Å—Å –æ–±—ä—è–≤–ª—è–µ—Ç –¥–µ–Ω—å —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏... üò¢")
            bot.send_message(BARTENDER, "–ü—Ä–∏–≤–µ—Ç, –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –º–∞–≥–æ–≤ –Ω–µ –±—É–¥–µ—Ç. –î–µ–Ω—å —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏.")
            clear_poll_results()
            clear_poll_id()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–∞–∑–∞ –±–∞—Ä–º–µ–Ω—É: {e}")

    # --- –†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –∏–≤–µ–Ω—Ç—É ---
    elif data.startswith('send_event_result_'):
        from events import get_event_by_id, load_event_data, unpin_event_poll, save_event_data, delete_event
        event_id = data.replace('send_event_result_', '')
        event = get_event_by_id(event_id)
        if not event:
            bot.answer_callback_query(callback.id, '–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', show_alert=True)
            return
        event_data = load_event_data(event_id)
        participants_count = len(event_data['participants'])
        friends_count = sum(f['count'] for f in event_data.get('friends', []))
        total_count = participants_count + friends_count
        tables = (total_count + 3) // 4
        message = f'–ü—Ä–∏–≤–µ—Ç! –°–µ–≥–æ–¥–Ω—è –º–∞–≥–∏ —Ä–µ—à–∏–ª–∏ –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ —Å–æ–±—Ä–∞—Ç—å—Å—è!\n–í–æ—Ç —Å—Ç–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –ø—Ä–∏–¥—ë—Ç: {total_count} –Ω—É–∂–Ω–æ {tables} —Å—Ç–æ–ª–æ–≤.\n–í—Ä–µ–º—è —Å–±–æ—Ä–∞: {event["date"]} {event["time"]}'
        bot.send_message(BARTENDER, message)
        unpin_event_poll(event_id)
        save_event_data(event_id, {'participants': [], 'friends': []})
        delete_event(event_id)
        bot.answer_callback_query(callback.id, '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –±–∞—Ä–º–µ–Ω—É, –∏–≤–µ–Ω—Ç —É–¥–∞–ª—ë–Ω!', show_alert=True)
        bot.send_message(callback.message.chat.id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ '{event['title']}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –±–∞—Ä–º–µ–Ω—É –∏ –∏–≤–µ–Ω—Ç —É–¥–∞–ª—ë–Ω.")
        return


def handle_poll_answer_callback(poll_answer):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –æ–ø—Ä–æ—Å–∞—Ö"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ–ø—Ä–æ—Å–æ–º —Å–æ–±—ã—Ç–∏—è
    from events import load_all_events
    events = load_all_events()
    
    for event in events:
        if event.get('poll_id') == poll_answer.poll_id:
            # –≠—Ç–æ –æ–ø—Ä–æ—Å —Å–æ–±—ã—Ç–∏—è
            handle_event_poll_answer(poll_answer)
            return
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–±—ã—Ç–∏–µ, —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –æ–ø—Ä–æ—Å
    from polls import handle_poll_answer
    handle_poll_answer(poll_answer)